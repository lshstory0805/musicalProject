<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.human.dao.IMusicalDao">

	<select id="selectAllMusical" parameterType="map" resultType="com.human.dto.MusicalDto">
	<![CDATA[
	SELECT distinct m.*, v.venue_name, h.hall_name, COALESCE(like_count.total_likes, 0) AS total_likes
	FROM musical m
	JOIN musical_schedule ms ON m.musical_id = ms.musical_id
	JOIN venue v ON v.venue_id = ms.venue_id
	JOIN hall h ON h.hall_id = ms.hall_id
	LEFT JOIN (
    SELECT musical_id, COUNT(*) AS total_likes
    FROM musical_like
    GROUP BY musical_id
	) like_count ON m.musical_id = like_count.musical_id
	WHERE   
	    upper(m.musical_title) LIKE upper('%' || #{filter.keyword, jdbcType=VARCHAR} || '%')
	    AND
	    ((#{filter.startDate, jdbcType=VARCHAR} IS NULL AND #{filter.endDate, jdbcType=VARCHAR} IS NULL) 
	        OR (m.musical_period_start <= TO_DATE(#{filter.endDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') 
	        AND m.musical_period_end >= TO_DATE(#{filter.startDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')))
	    AND
	    (#{filter.age, jdbcType=INTEGER} = 0 OR m.musical_agelimit <= #{filter.age, jdbcType=INTEGER})  
	    AND
	    (#{filter.minRunningtime, jdbcType=INTEGER} IS NULL AND #{filter.maxRunningtime, jdbcType=INTEGER} IS NULL
	        OR (m.musical_runningtime <= #{filter.maxRunningtime, jdbcType=INTEGER} 
	        AND m.musical_runningtime >= #{filter.minRunningtime, jdbcType=INTEGER}))
	    AND
	    (SYSDATE BETWEEN ADD_MONTHS(m.musical_period_start, -1) AND m.musical_period_end - 1)
        AND
        ((#{filter.location, jdbcType=VARCHAR} is null) or (v.venue_address like '%' || #{filter.location, jdbcType=VARCHAR} || '%')) 
	ORDER BY
	    CASE
	        WHEN #{filter.sort, jdbcType=VARCHAR} = 'like' THEN TO_CHAR(-COALESCE(like_count.total_likes, 0))
	        WHEN #{filter.sort, jdbcType=VARCHAR} = 'period' THEN TO_CHAR(m.musical_period_start, 'YYYY-MM-DD')
	        WHEN #{filter.sort, jdbcType=VARCHAR} = 'title' THEN TO_CHAR(m.musical_title)
	        ELSE TO_CHAR(m.musical_id)
	    END
	    
	OFFSET (#{vo.page, jdbcType=INTEGER} - 1) * #{vo.perPageNum, jdbcType=INTEGER} ROWS
	FETCH NEXT #{vo.perPageNum, jdbcType=INTEGER} ROWS ONLY
	]]>
	</select>
	
	<select id = "selectMusicalId" resultType = "com.human.dto.MusicalDto">
		SELECT distinct m.*, v.venue_id, v.venue_name, h.hall_name, COALESCE(like_count.total_likes, 0) AS total_likes
		FROM musical m
		JOIN musical_schedule ms ON m.musical_id = ms.musical_id
		JOIN venue v ON v.venue_id = ms.venue_id
		JOIN hall h ON h.hall_id = ms.hall_id
		LEFT JOIN (
	    SELECT musical_id, COUNT(*) AS total_likes
	    FROM musical_like
	    GROUP BY musical_id
		) like_count ON m.musical_id = like_count.musical_id
		WHERE m.musical_id = #{musical_id} 
	</select>
	
	<select id="getTotalCount" parameterType="map" resultType="Integer">
	<![CDATA[
	select count(distinct m.musical_id) 
	from musical m
	join musical_schedule ms
	on m.musical_id = ms.musical_id
	join venue v
	on ms.venue_id = v.venue_id
	where 
		upper(m.musical_title) like upper('%' || #{filter.keyword} || '%')
		AND
		((#{filter.startDate, jdbcType=VARCHAR} IS NULL AND #{filter.endDate, jdbcType=VARCHAR} IS NULL) 
		    OR (m.musical_period_start <= TO_DATE(#{filter.endDate, jdbcType=VARCHAR}, 'YYYY-MM-DD') 
	    AND m.musical_period_end >= TO_DATE(#{filter.startDate, jdbcType=VARCHAR}, 'YYYY-MM-DD')))
	 	AND
		(#{filter.age, jdbcType=INTEGER} = 0 OR m.musical_agelimit <= #{filter.age, jdbcType=INTEGER})  
		AND
		(#{filter.minRunningtime, jdbcType=INTEGER} IS NULL AND #{filter.maxRunningtime, jdbcType=INTEGER} IS NULL
			OR (m.musical_runningtime <= #{filter.maxRunningtime, jdbcType=INTEGER} 
	    AND m.musical_runningtime >= #{filter.minRunningtime, jdbcType=INTEGER}))
	    AND
	    (SYSDATE BETWEEN ADD_MONTHS(m.musical_period_start, -1) AND m.musical_period_end - 1)
        AND
        ((#{filter.location, jdbcType=VARCHAR} is null) or (v.venue_address like '%' || #{filter.location, jdbcType=VARCHAR} || '%')) 
	]]>
	</select>
	
	<select id = "selectMusicalSchedule" resultType = "com.human.dto.MusicalScheduleDto">
	select * 
	from musical_schedule
	where musical_id = #{musical_id} 
	order by mu_sch_date, mu_sch_time
	</select>
	
	<select id = "selectMusicalLike" resultType = "Integer">
	SELECT 
	    CASE 
	        WHEN EXISTS (
	            SELECT 1 
	            FROM musical_like
	            WHERE customer_id = #{customer_id}
	              AND musical_id = #{musical_id}
	        ) THEN 1
	        ELSE 0
	    END AS is_liked
	FROM dual
	</select>
	
	<insert id = "insertLike">
	insert into musical_like (musical_id, customer_id)
	values(#{musical_id}, #{customer_id})
	</insert>
	
	<delete id = "deleteLike">
	delete 
	from musical_like
	where musical_id = #{musical_id} and customer_id = #{customer_id}
	</delete>
	
	<select id="musical_list" resultType="com.human.dto.MusicalDto">
	select musical_id,musical_title from musical 
	</select>
	<select id="musical_title" resultType="String">
	select musical_title from musical  where musical_id=#{param1}
	</select>
	
	<!--admin 뮤지컬 관리 -->

<sql id='musical_search'>
    <if test="keyword!=null">
    <if test="keyword!=''">
    <if test="searchType!=''">
    <if test="searchType=='title'">
            and (musical_title LIKE '%' || #{keyword} || '%')                        
    </if>
    <if test="searchType=='agelimit'">
            and (musical_agelimit LIKE '%' || #{keyword} || '%')                        
    </if>  </if>  </if></if>
</sql>

<sql id='musical_period'>
    <if test="fGroupKind!=null">
    <if test="fGroupKind!=''">
    <if test="nGroupKind!=null">
    <if test="nGroupKind!=''">
            <![CDATA[and TO_CHAR(musical_period_start, 'YYYYMM') >= #{fGroupKind}
            and TO_CHAR(musical_period_end, 'YYYYMM') <= #{nGroupKind}]]>
    </if>    </if></if></if>
</sql>

<select id="musical_listSearch" resultType="com.human.dto.MusicalDto" >	
	<![CDATA[SELECT *
FROM musical
WHERE 1=1]]>
<include refid="musical_search"/>
<include refid="musical_period"/>
<![CDATA[ORDER BY musical_id DESC
OFFSET (#{page} - 1) * #{perPageNum} ROWS
FETCH NEXT #{perPageNum} ROWS ONLY]]>
</select>

<select id="musical_listSearch_excel" resultType="com.human.dto.MusicalDto" >	
	<![CDATA[SELECT *
FROM musical
WHERE 1=1]]>
<include refid="musical_search"/>
<include refid="musical_period"/>
ORDER BY musical_id DESC
</select>

<select id="musical_listSearchCount" resultType="int">
<![CDATA[ select count(musical_id) from musical where 1=1 ]]>
<include refid="musical_search" />
<include refid="musical_period"/>
<![CDATA[ and musical_id > 0 ]]>
</select>

<update id="musical_update"> update musical set musical_title=#{musical_title},musical_poster
		=#{musical_poster},musical_period_start=#{musical_period_start},musical_agelimit=#{musical_agelimit},
		musical_period_end =#{musical_period_end},musical_runningtime=#{musical_runningtime} 
		where musical_id = #{musical_id}
</update>
	
<delete id="musical_delete"> delete from musical where musical_id = #{mId} </delete>

<insert id="musical_create">
INSERT INTO musical 
		( musical_id, musical_title, musical_poster,
			musical_period_start,musical_period_end,
			musical_runningtime,musical_agelimit) VALUES
			( musical_seq.nextval,#{musical_title},#{musical_poster},#{musical_period_start},#{musical_period_end}
			,#{musical_runningtime},#{musical_agelimit})
</insert>

<select id="musical_read" resultType="MusicalDto">
		select * from musical where
		musical_id =
		#{musical_id}
	</select>
	
</mapper>








